# Generated by Django 5.2.7 on 2025-10-16 00:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_add_db_objects'),
    ]

    operations = [
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('archive_id', models.AutoField(primary_key=True, serialize=False)),
                ('learned_or_leveraged', models.CharField(choices=[('Learn', 'Learn'), ('Leverage', 'Leverage')], max_length=20)),
                ('summary', models.TextField(blank=True, null=True)),
                ('archived_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('cohort_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('cycle_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Archived', 'Archived')], default='Active', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('log_date', models.DateField()),
                ('finance', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('fitness', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('fun', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('husband', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('father', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('son', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('business', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('community', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('philanthropy', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.cycle')),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('goal_id', models.AutoField(primary_key=True, serialize=False)),
                ('domain', models.CharField(choices=[('Life', 'Life'), ('Leadership', 'Leadership'), ('Legacy', 'Legacy')], max_length=20)),
                ('goal_statement', models.TextField()),
                ('lag_metric', models.TextField()),
                ('lead_metrics', models.TextField()),
                ('smaart_check', models.BooleanField(default=False)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.cycle')),
            ],
        ),
        migrations.CreateModel(
            name='Scoreboard',
            fields=[
                ('scoreboard_id', models.AutoField(primary_key=True, serialize=False)),
                ('life_points', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('leadership_points', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('legacy_points', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_points', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('level', models.CharField(blank=True, choices=[('Unstable', 'Unstable'), ('Survivor', 'Survivor'), ('Performer', 'Performer'), ('Unshakable', 'Unshakable')], max_length=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('join_date', models.DateField(auto_now_add=True)),
                ('current_level', models.CharField(blank=True, choices=[('Unstable', 'Unstable'), ('Survivor', 'Survivor'), ('Performer', 'Performer'), ('Unshakable', 'Unshakable')], max_length=20, null=True)),
                ('cohort', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.cohort')),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('week_id', models.AutoField(primary_key=True, serialize=False)),
                ('week_number', models.IntegerField()),
                ('starts_on', models.DateField()),
                ('ends_on', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyPlan',
            fields=[
                ('weekly_plan_id', models.AutoField(primary_key=True, serialize=False)),
                ('tactics_planned', models.IntegerField()),
                ('tactics_completed', models.IntegerField()),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.goal')),
            ],
        ),
        migrations.DeleteModel(
            name='Item',
        ),
        migrations.AddField(
            model_name='archive',
            name='cycle',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.cycle'),
        ),
        migrations.AddField(
            model_name='scoreboard',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AddField(
            model_name='dailylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AddField(
            model_name='cycle',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AddField(
            model_name='week',
            name='cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.cycle'),
        ),
        migrations.AddField(
            model_name='scoreboard',
            name='week',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.week'),
        ),
        migrations.AddField(
            model_name='dailylog',
            name='week',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.week'),
        ),
        migrations.AddField(
            model_name='weeklyplan',
            name='week',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.week'),
        ),
        migrations.AddConstraint(
            model_name='cycle',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gt', models.F('start_date'))), name='check_cycle_dates'),
        ),
        migrations.AddConstraint(
            model_name='week',
            constraint=models.CheckConstraint(condition=models.Q(('week_number__gte', 1), ('week_number__lte', 12)), name='check_week_number'),
        ),
        migrations.AddConstraint(
            model_name='week',
            constraint=models.CheckConstraint(condition=models.Q(('ends_on__gte', models.F('starts_on'))), name='check_week_dates'),
        ),
        migrations.AlterUniqueTogether(
            name='week',
            unique_together={('cycle', 'week_number')},
        ),
        migrations.AddConstraint(
            model_name='scoreboard',
            constraint=models.CheckConstraint(condition=models.Q(('total_points__lte', 21.0)), name='check_total_points_max'),
        ),
        migrations.AlterUniqueTogether(
            name='dailylog',
            unique_together={('user', 'log_date')},
        ),
        migrations.AddConstraint(
            model_name='weeklyplan',
            constraint=models.CheckConstraint(condition=models.Q(('tactics_planned__gte', 0)), name='check_tactics_planned_nonneg'),
        ),
        migrations.AddConstraint(
            model_name='weeklyplan',
            constraint=models.CheckConstraint(condition=models.Q(('tactics_completed__gte', 0), ('tactics_completed__lte', models.F('tactics_planned'))), name='check_tactics_completed_bounds'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklyplan',
            unique_together={('week', 'goal')},
        ),
    ]
